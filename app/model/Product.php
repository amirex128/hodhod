<?php

namespace App\model;

use App\Event\Event\newProductEvent;
use App\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;


/**
 * App\model\Product
 *
 * @property int $id
 * @property int|null $user_id
 * @property int|null $brand_id
 * @property string $title
 * @property string|null $description
 * @property string|null $body
 * @property string|null $video
 * @property string $code
 * @property array $related
 * @property int $stock
 * @property int $price
 * @property int $offer
 * @property string $image
 * @property array|null $gallery
 * @property int $special
 * @property int $status
 * @property int $situation
 * @property int $view_count
 * @property int $order_count
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property-read \App\model\Brand|null $brand
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\model\Category[] $categories
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\model\Color[] $colors
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\model\Design[] $designs
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\model\OrderItem[] $order_item
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\model\Size[] $sizes
 * @property-read \App\User|null $user
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product newQuery()
 * @method static \Illuminate\Database\Query\Builder|\App\model\Product onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product query()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereBody($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereBrandId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereGallery($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereImage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereOffer($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereOrderCount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product wherePrice($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereRelated($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereSituation($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereSpecial($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereStock($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereVideo($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\model\Product whereViewCount($value)
 * @method static \Illuminate\Database\Query\Builder|\App\model\Product withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\model\Product withoutTrashed()
 * @mixin \Eloquent
 */
class Product extends Model
{

    //use SoftDeletes;

//    protected $appends=["related"];
    protected $guarded = [];
    protected $casts = [
        'gallery' => 'array',
        'related' => 'array',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::creating(function ($product) {
//        $product->related=[1];
        });
        self::created(function ($product) {

            event(new newProductEvent($product));
        });
    }

    public function getRelatedAttribute($value)
    {
        if (count(json_decode($value)) > 0) {
            $related = [];

            foreach (json_decode($value) as $item) {
                 $related[] = (int) $item;
            }
            return $related;
        } else {
            return [];

        }
    }

    public function categories()
    {
        return $this->morphToMany(Category::class, 'categorical');

    }

    public function colors()
    {
        return $this->belongsToMany(Color::class)->withTimestamps();

    }

    public function brand()
    {
        return $this->belongsTo(Brand::class);

    }

    public function sizes()
    {
        return $this->belongsToMany(Size::class)->withTimestamps();

    }

    public function designs()
    {
        return $this->belongsToMany(Design::class)->withTimestamps();

    }

    public function order_item()
    {
        return $this->hasMany(OrderItem::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);

    }

    public function media()
    {
        return $this->morphToMany(Media::class,"mediable");
    }
}
